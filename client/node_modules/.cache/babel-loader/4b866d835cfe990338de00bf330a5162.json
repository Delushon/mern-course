{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pansh\\\\Desktop\\\\mern-course\\\\client\\\\src\\\\pages\\\\DetailPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { Loader } from \"../components/Loader\";\nimport { useHttp } from \"../hooks/http.hook\";\nimport { LinkCard } from \"../components/LinkCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const DetailPage = () => {\n  _s();\n\n  const {\n    token\n  } = useContext(AuthContext);\n  const {\n    request,\n    loading\n  } = useHttp();\n  const [link, setLink] = useState(null);\n  const linkId = useParams().id;\n  const getLink = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/link/${linkId}`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setLink(fetched);\n    } catch (e) {}\n  }, [token, linkId, request]);\n  useEffect(() => {\n    getLink();\n  }, [getLink]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && link && /*#__PURE__*/_jsxDEV(LinkCard, {\n      link: link\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 35\n    }, this)\n  }, void 0, false);\n};\n\n_s(DetailPage, \"XO3liI/dGvGB4cCA0xMAaLwhXDQ=\", false, function () {\n  return [useHttp, useParams];\n});\n\n_c = DetailPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"DetailPage\");","map":{"version":3,"sources":["C:/Users/pansh/Desktop/mern-course/client/src/pages/DetailPage.js"],"names":["React","useCallback","useContext","useEffect","useState","useParams","AuthContext","Loader","useHttp","LinkCard","DetailPage","token","request","loading","link","setLink","linkId","id","getLink","fetched","Authorization","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,QAAnD,QAAkE,OAAlE;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,MAAR,QAAqB,sBAArB;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,SAAQC,QAAR,QAAuB,wBAAvB;;;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAC5B,QAAM;AAACC,IAAAA;AAAD,MAAUT,UAAU,CAACI,WAAD,CAA1B;AACA,QAAM;AAACM,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBL,OAAO,EAAlC;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAMY,MAAM,GAAGX,SAAS,GAAGY,EAA3B;AAEA,QAAMC,OAAO,GAAGjB,WAAW,CAAC,YAAY;AACpC,QAAI;AACA,YAAMkB,OAAO,GAAG,MAAMP,OAAO,CAAE,aAAYI,MAAO,EAArB,EAAwB,KAAxB,EAA+B,IAA/B,EAAqC;AAACI,QAAAA,aAAa,EAAG,UAAST,KAAM;AAAhC,OAArC,CAA7B;AACAI,MAAAA,OAAO,CAACI,OAAD,CAAP;AACH,KAHD,CAGE,OAAOE,CAAP,EAAU,CAAE;AACjB,GAL0B,EAKxB,CAACV,KAAD,EAAQK,MAAR,EAAgBJ,OAAhB,CALwB,CAA3B;AAOAT,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,OAAO;AACV,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAGL,OAAH,EAAY;AACR,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI;AAAA,cACM,CAACA,OAAD,IAAYC,IAAZ,iBAAoB,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEA;AAAhB;AAAA;AAAA;AAAA;AAAA;AAD1B,mBADJ;AAKH,CA1BM;;GAAMJ,U;UAEkBF,O,EAEZH,S;;;KAJNK,U","sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router-dom\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {Loader} from \"../components/Loader\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {LinkCard} from \"../components/LinkCard\";\r\n\r\nexport const DetailPage = () => {\r\n    const {token} = useContext(AuthContext)\r\n    const {request, loading} = useHttp()\r\n    const [link, setLink] = useState(null)\r\n    const linkId = useParams().id\r\n\r\n    const getLink = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/link/${linkId}`, 'GET', null, {Authorization: `Bearer ${token}`})\r\n            setLink(fetched)\r\n        } catch (e) {}\r\n    }, [token, linkId, request])\r\n\r\n    useEffect(() => {\r\n        getLink()\r\n    }, [getLink])\r\n\r\n    if(loading) {\r\n        return <Loader />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { !loading && link && <LinkCard link={link} /> }\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}