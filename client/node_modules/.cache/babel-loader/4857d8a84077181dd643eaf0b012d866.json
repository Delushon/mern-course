{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/pansh/Desktop/mern-course/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/pansh/Desktop/mern-course/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/pansh/Desktop/mern-course/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useCallback}from\"react\";export var useHttp=function useHttp(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var request=useCallback(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(url){var method,body,headers,response,data,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:method=_args.length>1&&_args[1]!==undefined?_args[1]:'GET';body=_args.length>2&&_args[2]!==undefined?_args[2]:null;headers=_args.length>3&&_args[3]!==undefined?_args[3]:{};setLoading(true);_context.prev=4;if(body){body=JSON.stringify(body);headers['Content-Type']='application/json';}_context.next=8;return fetch(url,{method:method,body:body,headers:headers});case 8:response=_context.sent;_context.next=11;return response.json();case 11:data=_context.sent;if(response.ok){_context.next=14;break;}throw new Error(data.message||'Что-то пошло не так');case 14:setLoading(false);return _context.abrupt(\"return\",data);case 18:_context.prev=18;_context.t0=_context[\"catch\"](4);setLoading(false);setError(_context.t0.message);throw _context.t0;case 23:case\"end\":return _context.stop();}}},_callee,null,[[4,18]]);}));return function(_x){return _ref.apply(this,arguments);};}(),[]);var clearError=useCallback(function(){return setError(null);},[]);return{loading:loading,request:request,error:error,clearError:clearError};};","map":{"version":3,"sources":["C:/Users/pansh/Desktop/mern-course/client/src/hooks/http.hook.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError"],"mappings":"6dAAA,OAAQA,QAAR,CAAkBC,WAAlB,KAAoC,OAApC,CAEA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACzB,cAA8BF,QAAQ,CAAC,KAAD,CAAtC,wCAAOG,OAAP,eAAgBC,UAAhB,eACA,eAA0BJ,QAAQ,CAAC,IAAD,CAAlC,yCAAOK,KAAP,eAAcC,QAAd,eACA,GAAMC,CAAAA,OAAO,CAAGN,WAAW,0FAAC,iBAAOO,GAAP,wKAAYC,MAAZ,+CAAqB,KAArB,CAA4BC,IAA5B,+CAAmC,IAAnC,CAAyCC,OAAzC,+CAAmD,EAAnD,CACxBP,UAAU,CAAC,IAAD,CAAV,CADwB,gBAGpB,GAAGM,IAAH,CAAS,CACLA,IAAI,CAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP,CACAC,OAAO,CAAC,cAAD,CAAP,CAA0B,kBAA1B,CACH,CANmB,sBAQGG,CAAAA,KAAK,CAACN,GAAD,CAAM,CAACC,MAAM,CAANA,MAAD,CAASC,IAAI,CAAJA,IAAT,CAAeC,OAAO,CAAPA,OAAf,CAAN,CARR,QAQdI,QARc,sCASDA,CAAAA,QAAQ,CAACC,IAAT,EATC,SASdC,IATc,kBAWfF,QAAQ,CAACG,EAXM,+BAYV,IAAIC,CAAAA,KAAJ,CAAUF,IAAI,CAACG,OAAL,EAAgB,qBAA1B,CAZU,SAepBhB,UAAU,CAAC,KAAD,CAAV,CAfoB,gCAiBba,IAjBa,4DAmBpBb,UAAU,CAAC,KAAD,CAAV,CACAE,QAAQ,CAAC,YAAEc,OAAH,CAAR,CApBoB,uFAAD,+DAuBxB,EAvBwB,CAA3B,CAyBA,GAAMC,CAAAA,UAAU,CAAGpB,WAAW,CAAC,iBAAMK,CAAAA,QAAQ,CAAC,IAAD,CAAd,EAAD,CAAuB,EAAvB,CAA9B,CAEA,MAAO,CAAEH,OAAO,CAAPA,OAAF,CAAWI,OAAO,CAAPA,OAAX,CAAoBF,KAAK,CAALA,KAApB,CAA2BgB,UAAU,CAAVA,UAA3B,CAAP,CACH,CA/BM","sourcesContent":["import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n        setLoading(true)\r\n        try {\r\n            if(body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n\r\n            const response = await fetch(url, {method, body, headers})\r\n            const data = await response.json()\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n\r\n            setLoading(false)\r\n\r\n            return data\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return { loading, request, error, clearError }\r\n}"]},"metadata":{},"sourceType":"module"}